import org.gradle.api.tasks.bundling.Zip

apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return !(version?.toString() ?: '').contains('SNAPSHOT')
}

def getRepositoryUsername() {
    return hasProperty('sonatypeUsername') ? sonatypeUsername : ''
}

def getRepositoryPassword() {
    return hasProperty('sonatypePassword') ? sonatypePassword : ''
}

def isSkipSigning() {
    return hasProperty('skipSigning') && project.property('skipSigning').toString().toBoolean()
}

def hasNonEmptyProperty(String name) {
    def value = project.findProperty(name)
    return value != null && value.toString().trim()
}

def hasSigningCredentials() {
    return hasNonEmptyProperty('signing.gnupg.keyName') ||
        (hasNonEmptyProperty('signing.keyId') && hasNonEmptyProperty('signing.password') && hasNonEmptyProperty('signing.secretKeyRingFile')) ||
        (hasNonEmptyProperty('signingKey') && hasNonEmptyProperty('signingPassword'))
}

def isSigningEnabled() {
    if (isSkipSigning()) {
        return false
    }
    if (project.hasProperty('enableSigning')) {
        return project.property('enableSigning').toString().toBoolean() && hasSigningCredentials()
    }
    return false
}

afterEvaluate { project ->
    publishing {
        publications {
            create('maven', MavenPublication) {
                from components.release
                artifactId = project.findProperty('POM_SETTING_ARTIFACT_ID') ?: project.name
                pom {
                    name = project.findProperty('POM_SETTING_NAME') ?: project.name
                    packaging = project.findProperty('POM_SETTING_PACKAGING') ?: 'aar'
                    description = project.findProperty('POM_SETTING_DESCRIPTION') ?: ''
                    url = project.findProperty('POM_SETTING_URL') ?: ''
                    scm {
                        url = project.findProperty('POM_SETTING_SCM_URL') ?: ''
                        connection = project.findProperty('POM_SETTING_SCM_CONNECTION') ?: ''
                        developerConnection = project.findProperty('POM_SETTING_SCM_DEV_CONNECTION') ?: ''
                    }
                    licenses {
                        license {
                            name = project.findProperty('POM_SETTING_LICENCE_NAME') ?: ''
                            url = project.findProperty('POM_SETTING_LICENCE_URL') ?: ''
                            distribution = project.findProperty('POM_SETTING_LICENCE_DIST') ?: 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = project.findProperty('POM_SETTING_DEVELOPER_ID') ?: ''
                            name = project.findProperty('POM_SETTING_DEVELOPER_NAME') ?: ''
                        }
                    }
                }
            }
        }
        repositories {
            if (project.hasProperty('centralBundle') && project.property('centralBundle').toString().toBoolean()) {
                maven {
                    name = 'CentralBundle'
                    url = project.layout.buildDirectory.dir('central-bundle')
                }
            } else {
                maven {
                    def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                    def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                    url = uri(isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl)
                    credentials {
                        username = getRepositoryUsername()
                        password = getRepositoryPassword()
                    }
                }
            }
        }
    }

    signing {
        if (isSigningEnabled()) {
            if (project.hasProperty('useGpgCmd') && project.property('useGpgCmd').toString().toBoolean()) {
                useGpgCmd()
            }
            required { isReleaseBuild() }
            sign publishing.publications.maven
        } else {
            logger.lifecycle('Skipping PGP signing because key material is not configured or signing was not explicitly enabled (-PenableSigning=true)')
        }
    }

    tasks.register('packageReleaseZip', Zip) {
        group = 'distribution'
        description = 'Packages release AAR, sources, javadoc, and POM into a zip archive.'
        dependsOn 'assembleRelease', 'sourcesJar', 'javadocJar', 'generatePomFileForMavenPublication'
        from("${buildDir}/outputs/aar") { include '*-release.aar' }
        from("${buildDir}/libs") { include '*-sources.jar', '*-javadoc.jar' }
        from("${buildDir}/publications/maven") { include 'pom-default.xml'; into 'maven' }
        archiveBaseName.set(project.findProperty('POM_SETTING_ARTIFACT_ID') ?: project.name)
        archiveVersion.set(project.version?.toString() ?: project.findProperty('VERSION_NAME') ?: 'unspecified')
        destinationDirectory.set(file("${buildDir}/releasePackage"))
    }

    tasks.register('generateCentralBundleChecksums') {
        group = 'publishing'
        description = 'Generates SHA-256 and SHA-512 checksums for the Central bundle directory.'
        doLast {
            def bundleDir = project.layout.buildDirectory.dir('central-bundle').get().asFile
            if (!bundleDir.exists()) {
                logger.lifecycle("Central bundle directory not found: ${bundleDir}")
                return
            }
            bundleDir.eachFileRecurse { file ->
                if (file.isFile()) {
                    ['SHA-256': 'sha256', 'SHA-512': 'sha512'].each { alg, ext ->
                        def digest = java.security.MessageDigest.getInstance(alg)
                        file.withInputStream { is ->
                            byte[] buffer = new byte[8192]
                            int read
                            while ((read = is.read(buffer)) != -1) {
                                digest.update(buffer, 0, read)
                            }
                        }
                        def checksumFile = new File(file.parentFile, "${file.name}.${ext}")
                        checksumFile.text = digest.digest().collect { String.format('%02x', it) }.join()
                    }
                }
            }
        }
    }

    tasks.register('zipCentralBundle', Zip) {
        group = 'publishing'
        description = 'Creates a zip archive of the Central bundle directory.'
        dependsOn 'generateCentralBundleChecksums'
        archiveFileName.set("central-bundle-${project.findProperty('POM_SETTING_ARTIFACT_ID') ?: project.name}-${project.version ?: project.findProperty('VERSION_NAME') ?: 'unspecified'}.zip")
        from(project.layout.buildDirectory.dir('central-bundle'))
        destinationDirectory.set(project.layout.buildDirectory.dir('distributions'))
    }
}
